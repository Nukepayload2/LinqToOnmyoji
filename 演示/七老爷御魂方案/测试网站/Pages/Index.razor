@page "/"

@using System.IO;
@using System.Diagnostics;
@using Nukepayload2.Linq.Onmyoji;
@using Nukepayload2.Linq.Onmyoji.Utilities;

@inject IFileReaderService fileReaderService;
<h1>试用七老爷三周年庆御魂整理方案</h1>

<p>
    用痒痒熊截取快照，然后拖放到下面的框里面。你的文件不会被发送到任何服务器上。
    如果乱码了请更新 Excel，或者手动转换编码到 gb2312，或者使用 <a href="https://gitee.com/nukepayload2/LinqToOnmyojiDemoSite/releases">桌面版</a>。
</p>
<p>
    版本 1.0 preview 8, 适配 @痒痒熊快照.已适配的产品和版本 。
</p>
<style>
    .@dropTargetClass {
        display:block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
    }
    .@dropTargetDragClass {
        border-color: orangered;
        font-weight: bold;
    }
</style>

<div class="@DropClass"
     @ref=dropTargetElement
     @ondrop=OnDrop
     @ondragenter=OnDragEnter
     @ondragleave=OnDragLeave>
    请将痒痒熊快照 json 文件拖放到这里, 或者下面的按钮点击上传
    <p>
        <input type="file" @ref=fileOpenPicker @onchange=OnFileOK />
    </p>
    @foreach (var fileInfo in FileList)
    {
        <p>@fileInfo.Name</p>
    }
</div>

<p>
    <progress value=@progress />
</p>
<textarea style="max-width: 100%;" cols="50" rows="15">@Output</textarea>
<p hidden="hidden">
    <a @ref=saveFileReference download="上次弃置的御魂.csv"></a>
</p>
<p>
    B站、GitHub、百度贴吧、微博：Nukepayload2。阴阳师：依偎相守#2723416
</p>

@code {
    [Inject] IJSRuntime JsRuntime { get; set; }
    ElementReference saveFileReference;
    ElementReference dropTargetElement;
    ElementReference fileOpenPicker;
    IFileReaderRef dropReference;
    IFileReaderRef fileOpenPickReference;
    bool Additive { get; set; }
    object progress = 0;

    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    private List<string> _dropClasses = new List<string>() { dropTargetClass };

    string DropClass => string.Join(" ", _dropClasses);
    string Output { get; set; }
    List<IFileInfo> FileList { get; } = new List<IFileInfo>();

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            dropReference = fileReaderService.CreateReference(dropTargetElement);
            fileOpenPickReference = fileReaderService.CreateReference(fileOpenPicker);
            await dropReference.RegisterDropEventsAsync();
        }
    }

    public async Task OnAdditiveChange(ChangeEventArgs e)
    {
        Additive = (bool)e.Value;
        await dropReference.UnregisterDropEventsAsync();
        await dropReference.RegisterDropEventsAsync(Additive);
    }

    public async Task ClearFile()
    {
        await dropReference.ClearValue();
        await fileOpenPickReference.ClearValue();

        _dropClasses.Clear();
        _dropClasses.Add(dropTargetClass);

        await this.RefreshFileList();
    }

    public void OnDragEnter(EventArgs e)
    {
        _dropClasses.Add(dropTargetDragClass);
    }

    public void OnDragLeave(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
    }

    public async Task OnFileOK(EventArgs e)
    {
        await ReadFile();
    }

    public async Task OnDrop(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
        await ReadFile();
    }

    private async Task RefreshFileList()
    {
        this.FileList.Clear();
        var droppedFiles = await dropReference.EnumerateFilesAsync();
        var pickedFiles = await fileOpenPickReference.EnumerateFilesAsync();
        foreach (var file in droppedFiles.Concat(pickedFiles))
        {
            var fileInfo = await file.ReadFileInfoAsync();
            this.FileList.Add(fileInfo);
        }
        this.StateHasChanged();
    }

    public async Task ReadFile()
    {
        Output = string.Empty;
        this.StateHasChanged();
        var nl = Environment.NewLine;
        var droppedFiles = await dropReference.EnumerateFilesAsync();
        var pickedFiles = await fileOpenPickReference.EnumerateFilesAsync();
        foreach (var file in droppedFiles.Concat(pickedFiles))
        {
            var fileInfo = await file.ReadFileInfoAsync();
            Output += $"文件名: {fileInfo.Name}{nl}";
            Output += $"大小: {((double)fileInfo.Size) / 1024 / 1024:N2} MB{nl}";
            Output += $"修改日期: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{nl}";

            if (fileInfo.Type != "application/json")
            {
                Output += $"出现错误: 需要 Json 文件{nl}";
                continue; // For
            } // End If

            Output += $"正在加载文件...{nl}";
            progress = null;
            this.StateHasChanged();

            using (var fs = await file.OpenReadAsync())
            {
                try
                {
                    var timer = new Stopwatch();
                    timer.Start();
                    var buf = new byte[fs.Length];
                    await fs.ReadAsync(buf, 0, buf.Length);
                    var mem = new MemoryStream(buf);
                    Output += $"[{timer.ElapsedMilliseconds}ms] 文件已加载，开始解析痒痒熊快照文件。请不要关闭浏览器...{nl}";
                    this.StateHasChanged();
                    await Task.Delay(10);
                    var snap = 痒痒熊快照.加载Json文件流(mem);
                    if (snap.版本未适配)
                    {
                        Output += $"注意：本程序仅适配了{痒痒熊快照.已适配的产品和版本}，而这个文件的格式或者版本未经适配。{nl}";
                    }
                    Output += $"[{timer.ElapsedMilliseconds}ms] 已解析痒痒熊快照文件，正在整理御魂。这不会花费太长时间。{nl}";
                    this.StateHasChanged();
                    await Task.Delay(10);
                    IEnumerable<御魂> 六星御魂()
                    {
                        return snap.数据.御魂.Where(s => s.星级 == 6 && !s.已弃置);
                    }
                    var 整理前未弃置御魂 = 六星御魂().ToDictionary(s => s.Id, s => s);
                    var 整理前六星御魂数量 = 整理前未弃置御魂.Count;
                    Output += $"[{timer.ElapsedMilliseconds}ms] 整理前六星御魂: {整理前六星御魂数量} 个{nl}";
                    this.StateHasChanged();
                    await Task.Delay(10);
                    御魂整理方案.七老爷三周年庆御魂整理方案(snap);
                    var 整理后未弃置御魂 = 六星御魂().ToDictionary(s => s.Id, s => s);
                    var 整理后六星御魂数量 = 整理后未弃置御魂.Count;
                    Output += $"[{timer.ElapsedMilliseconds}ms] 整理后六星御魂: {整理后六星御魂数量} 个{nl}";
                    if (整理后六星御魂数量 > 整理前六星御魂数量)
                    {
                        Output += $"[{timer.ElapsedMilliseconds}ms] 整理后御魂反而多说明此账号弃置过胚子。{nl}";
                    }
                    Output += $"[{timer.ElapsedMilliseconds}ms] 正在生成报告...{nl}";
                    this.StateHasChanged();
                    await Task.Delay(10);
                    var 整理前未弃置Id = 整理前未弃置御魂.Keys.ToArray();
                    foreach (var id in 整理后未弃置御魂.Keys)
                    {
                        整理前未弃置御魂.Remove(id);
                    }
                    foreach (var id in 整理前未弃置Id)
                    {
                        整理后未弃置御魂.Remove(id);
                    }

                    var 弃置的御魂 = from 御魂 in 整理前未弃置御魂.Values select (御魂, 操作: "弃置");
                    var 恢复的御魂 = from 御魂 in 整理后未弃置御魂.Values select (御魂, 操作: "恢复");

                    var 存储数据 =
                        from grp in 弃置的御魂.Concat(恢复的御魂)
                        let s = grp.御魂
                        let 副属性1 = 取元素没有就返回空(s.副属性, 0)?.属性分类().ToString()
                        let 副属性2 = 取元素没有就返回空(s.副属性, 1)?.属性分类().ToString()
                        let 副属性3 = 取元素没有就返回空(s.副属性, 2)?.属性分类().ToString()
                        let 副属性4 = 取元素没有就返回空(s.副属性, 3)?.属性分类().ToString()
                        let 主属性 = s.主属性.属性分类().ToString()
                        select new
                        {
                            grp.操作,
                            种类 = s.种类中文名(),
                            s.星级,
                            s.等级,
                            位置 = s.位置从1开始(),
                            主属性,
                            主属性数值 = s.主属性.数值.ToString(取属性数字格式(主属性)),
                            副属性1,
                            副属性1数值 = 取元素没有就返回空(s.副属性, 0)?.数值.ToString(取属性数字格式(副属性1)),
                            副属性2,
                            副属性2数值 = 取元素没有就返回空(s.副属性, 1)?.数值.ToString(取属性数字格式(副属性2)),
                            副属性3,
                            副属性3数值 = 取元素没有就返回空(s.副属性, 2)?.数值.ToString(取属性数字格式(副属性3)),
                            副属性4,
                            副属性4数值 = 取元素没有就返回空(s.副属性, 3)?.数值.ToString(取属性数字格式(副属性4))
                        };
                    var csvText = Nukepayload2.Csv.CsvConvert.SerializeObject(存储数据.ToArray());
                    Output += $"[{timer.ElapsedMilliseconds}ms] 报告已生成。{nl}注意: 不是所有浏览器都支持保存此报告。如果 30 秒内你的浏览器没有提示保存一个 csv 文件，建议改别的浏览器或者使用此工具的桌面版。{nl}";
                    this.StateHasChanged();
                    await Task.Delay(10);
                    await JsRuntime.InvokeVoidAsync("saveAsBlob", csvText, $"{System.IO.Path.GetFileNameWithoutExtension(fileInfo.Name ?? "未命名")}上次弃置的御魂.csv");
                }
                catch (Exception ex)
                {
                    Output += $"出现错误{nl}";
                    Output += ex.ToString();
                } // End Try
                progress = 0;
            } // End Using
            this.StateHasChanged();
        } // Next file
        await ClearFile();
    } // End Function ' ReadFile

    public static string 取属性数字格式(string 属性)
    {
        if (属性.EndsWith("加成") || 属性.StartsWith("暴击") || 属性.StartsWith("效果"))
        {
            return "P2";
        }
        return "N2";
    } // End Function

    public static T 取元素没有就返回空<T>(T[] arr, int index) where T : class
    {
        if (index < arr.Length)
        {
            return arr[index];
        }
        return null;
    } // End Function

    // End Code
}
